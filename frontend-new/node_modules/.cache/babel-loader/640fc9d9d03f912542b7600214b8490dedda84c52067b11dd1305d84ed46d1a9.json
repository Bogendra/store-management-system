{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk04\\\\Desktop\\\\Bogendra\\\\Projects\\\\store-management-system\\\\frontend-new\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport authApi from '../api/auth';\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with default values\nconst AuthContext = /*#__PURE__*/createContext({\n  token: null,\n  isAuthenticated: false,\n  userInfo: null,\n  login: () => {},\n  logout: () => {},\n  setCurrentUserInfo: () => {}\n});\n\n// Create the context provider component\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [userInfo, setUserInfo] = useState(null);\n  const isAuthenticated = !!token;\n\n  // Load user profile if token exists\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (token) {\n        try {\n          const userData = await authApi.getCurrentUser(token);\n          setUserInfo(userData);\n        } catch (error) {\n          console.error('Error fetching user info:', error);\n          // If token is invalid, log out\n          logout();\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [token]);\n\n  // Save token to localStorage when it changes\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }, [token]);\n\n  // Login function\n  const login = newToken => {\n    setToken(newToken);\n  };\n\n  // Logout function\n  const logout = () => {\n    setToken(null);\n    setUserInfo(null);\n    localStorage.removeItem('token');\n  };\n\n  // Set user info\n  const setCurrentUserInfo = user => {\n    setUserInfo(user);\n  };\n\n  // Create the context value\n  const contextValue = {\n    token,\n    isAuthenticated,\n    userInfo,\n    login,\n    logout,\n    setCurrentUserInfo\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using the auth context\n_s(AuthProvider, \"n/67UVNwaGBehXDVMBoJniQZSX8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authApi","jsxDEV","_jsxDEV","AuthContext","token","isAuthenticated","userInfo","login","logout","setCurrentUserInfo","AuthProvider","children","_s","setToken","localStorage","getItem","setUserInfo","fetchUserProfile","userData","getCurrentUser","error","console","setItem","removeItem","newToken","user","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/bbk04/Desktop/Bogendra/Projects/store-management-system/frontend-new/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport authApi, { UserInfo } from '../api/auth';\n\n// Define the context type\ninterface AuthContextType {\n  token: string | null;\n  isAuthenticated: boolean;\n  userInfo: UserInfo | null;\n  login: (newToken: string) => void;\n  logout: () => void;\n  setCurrentUserInfo: (user: UserInfo) => void;\n}\n\n// Create the context with default values\nconst AuthContext = createContext<AuthContextType>({\n  token: null,\n  isAuthenticated: false,\n  userInfo: null,\n  login: () => {},\n  logout: () => {},\n  setCurrentUserInfo: () => {}\n});\n\n// Create the context provider component\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\n  const isAuthenticated = !!token;\n  \n  // Load user profile if token exists\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (token) {\n        try {\n          const userData = await authApi.getCurrentUser(token);\n          setUserInfo(userData);\n        } catch (error) {\n          console.error('Error fetching user info:', error);\n          // If token is invalid, log out\n          logout();\n        }\n      }\n    };\n    \n    fetchUserProfile();\n  }, [token]);\n  \n  // Save token to localStorage when it changes\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }, [token]);\n  \n  // Login function\n  const login = (newToken: string) => {\n    setToken(newToken);\n  };\n  \n  // Logout function\n  const logout = () => {\n    setToken(null);\n    setUserInfo(null);\n    localStorage.removeItem('token');\n  };\n  \n  // Set user info\n  const setCurrentUserInfo = (user: UserInfo) => {\n    setUserInfo(user);\n  };\n  \n  // Create the context value\n  const contextValue = {\n    token,\n    isAuthenticated,\n    userInfo,\n    login,\n    logout,\n    setCurrentUserInfo\n  };\n  \n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,OAAOC,OAAO,MAAoB,aAAa;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAkB;EACjDQ,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC,CAAC;EAChBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC;AAC7B,CAAC,CAAC;;AAEF;;AAKA,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGf,QAAQ,CAAgBgB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAChF,MAAM,CAACT,QAAQ,EAAEU,WAAW,CAAC,GAAGlB,QAAQ,CAAkB,IAAI,CAAC;EAC/D,MAAMO,eAAe,GAAG,CAAC,CAACD,KAAK;;EAE/B;EACAL,SAAS,CAAC,MAAM;IACd,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAIb,KAAK,EAAE;QACT,IAAI;UACF,MAAMc,QAAQ,GAAG,MAAMlB,OAAO,CAACmB,cAAc,CAACf,KAAK,CAAC;UACpDY,WAAW,CAACE,QAAQ,CAAC;QACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjD;UACAZ,MAAM,CAAC,CAAC;QACV;MACF;IACF,CAAC;IAEDS,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;;EAEX;EACAL,SAAS,CAAC,MAAM;IACd,IAAIK,KAAK,EAAE;MACTU,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAElB,KAAK,CAAC;IACtC,CAAC,MAAM;MACLU,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAClC;EACF,CAAC,EAAE,CAACnB,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMG,KAAK,GAAIiB,QAAgB,IAAK;IAClCX,QAAQ,CAACW,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMhB,MAAM,GAAGA,CAAA,KAAM;IACnBK,QAAQ,CAAC,IAAI,CAAC;IACdG,WAAW,CAAC,IAAI,CAAC;IACjBF,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;;EAED;EACA,MAAMd,kBAAkB,GAAIgB,IAAc,IAAK;IAC7CT,WAAW,CAACS,IAAI,CAAC;EACnB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBtB,KAAK;IACLC,eAAe;IACfC,QAAQ;IACRC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAf,QAAA,EACvCA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAApB,EAAA,CAlEaF,YAAyC;AAAAuB,EAAA,GAAzCvB,YAAyC;AAmEtD,OAAO,MAAMwB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMtC,UAAU,CAACM,WAAW,CAAC;AAAA;AAACgC,GAAA,CAAxCD,OAAO;AAEpB,eAAe/B,WAAW;AAAC,IAAA8B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}